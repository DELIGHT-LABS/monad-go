{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Ownable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n     *\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\n     */\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\n        return INITIALIZABLE_STORAGE;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        bytes32 slot = _initializableStorageSlot();\n        assembly {\n            $.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/interface/IProtocol.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IProtocol {\n    // user, 가게, deliver 등록\n    function registerUser(string calldata name, string calldata location, int256 pos) external;\n    function registerStore(string calldata name, string calldata description, string calldata location, int256 pos) external;\n    function registerDeliver(string calldata name) external;\n\n    // 메뉴 등록\n    function addMenu(string calldata name, string calldata description, int256 price, string calldata image_url) external;\n\n    // user, store, deliver, menu 제거\n    function removeMenu(int256 menu_index) external;\n    function removeUser(address user_addr) external;\n    function removeStore(address user_addr) external;\n    function removeDelivery(address user_addr) external;\n\n    function order(int256[] calldata menu_index) external payable;\n    function approveDelivery(int256 delivery_request_index) external;\n\n    function confirmOrder(int256 order_index) external;\n\n\n    // event\n    event OrderMenu(int256 order_index, string store_address, string user_address, int256 distance, int256 total_price, int256 delivery_fee);\n    event ConfirmDelivery(int256 delivery_request_index, int256 order_index);\n    event ConfirmOrder(\n      address user_addr,\n      address store_addr,\n      address deliver_addr\n    );\n}"
    },
    "contracts/Protocol.sol": {
      "content": "pragma solidity ^0.8.0;\n\nimport { Initializable } from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport { OwnableUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./interface/IProtocol.sol\";\n\nstruct User {\n    string name;\n    address addr;\n    string location;\n    int256 pos;\n}\n\nstruct Store {\n    address addr;\n    string location;\n    int256 pos;\n    string name;\n    string description;\n}\n\nstruct Menu {\n    uint256 index;\n    address store_address;\n    string name;\n    string description;\n    int256 price;\n    string image_url;\n}\n\nstruct Order {\n    uint256 index;\n    int256[] menu;\n    int256 total_price;\n    int256 request_index;\n    int256 delivery_fee;\n}\n\nstruct Deliver {\n    string name;\n    address addr;\n}\n\nstruct Delivery_Request {\n    uint256 index;\n    address user_addr;\n    address store_addr;\n    address deliver_addr;\n    uint256 order_index;\n}\n\ncontract Protocol is IProtocol, Initializable, OwnableUpgradeable {\n    // 지불 토큰 주소\n    uint256 public wti_price;\n\n    Store[] public stores;\n    mapping(address => User) public userMap;\n    mapping(address => Store) public storeMap;\n    mapping(address => Deliver) public deliverMap;\n    // store address로 menu index의 list매핑\n    mapping(address => Menu[]) public storeMenuMap;\n\n    // 요청한 유저의 주소 -> delivery_request index[]\n    mapping(address => uint256[]) public userOrderMap;\n    // order index -> order\n    mapping(uint256 => Order) public orderMap;\n    // delivery_requset index\n    mapping(uint256 => Delivery_Request) public deliveryRequestMap;\n    // delivery request index\n    uint256[] public pending_delivery;\n\n    function initialize() public initializer {\n        __Ownable_init(msg.sender);\n\n        // --- 목(Mock) 데이터 초기화 ---\n        initializeMockData();\n\n        wti_price = 1;\n\n    }\n\n    function initializeMockData() public onlyOwner {\n        // 1. 유저 데이터 등록\n        userMap[0xc638cfF5173bE947494207FE67B76460EBeaA23f] = User({\n            name: unicode\"김철수\",\n            addr: 0xc638cfF5173bE947494207FE67B76460EBeaA23f,\n            location: unicode\"서울시 강남구 역삼동\",\n            pos: 1\n        });\n\n        // 2. 상점 데이터 등록\n        storeMap[0xc638cfF5173bE947494207FE67B76460EBeaA23f] = Store({\n            addr: 0xc638cfF5173bE947494207FE67B76460EBeaA23f,\n            location: unicode\"서울시 강남구 테헤란로\",\n            pos: 2,\n            name: unicode\"황금반점\",\n            description: unicode\"전통 중화요리 전문점, 30년 내공의 맛\"\n        });\n        storeMap[0x9206a132Ae7Ffa929f50EF8551c21B387f5234C7] = Store({\n            addr: 0x9206a132Ae7Ffa929f50EF8551c21B387f5234C7,\n            location: unicode\"서울시 서초구 반포동\",\n            pos: 3,\n            name: unicode\"맛나분식\",\n            description: unicode\"추억의 맛, 떡볶이와 김밥\"\n        });\n\n        // 3. 배달원 데이터 등록\n        deliverMap[0x1FfF36fABa6Bd6507a08d3296ef60e4fd6b15095] = Deliver({\n            addr: 0x1FfF36fABa6Bd6507a08d3296ef60e4fd6b15095,\n            name: unicode\"스피드맨\"\n        });\n\n        // 4. 메뉴 데이터 등록 (storeMenuMap에 push)\n        storeMenuMap[0xc638cfF5173bE947494207FE67B76460EBeaA23f].push(Menu({\n            index: 0,\n            store_address: 0xc638cfF5173bE947494207FE67B76460EBeaA23f,\n            name: unicode\"짜장면\",\n            description: unicode\"기본에 충실한 짜장면\",\n            price: 7000,\n            image_url: \"https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyNTA0MjlfMTM1%2FMDAxNzQ1OTAwMTQ0Njk2.YtBTUQUwQVnUBLEomgr-PggTodTsna6ThCbVKRWhG4gg.tt8bP14sKO91Ui99Y0GBU9NzFGFDcSJrLp_LtL9EyY0g.PNG%2FChatGPT_Image_2025%25B3%25E2_4%25BF%25F9_29%25C0%25CF_%25BF%25C0%25C8%25C4_01_14_08.png&type=sc960_832\"\n        }));\n        storeMenuMap[0xc638cfF5173bE947494207FE67B76460EBeaA23f].push(Menu({\n            index: 1,\n            store_address: 0xc638cfF5173bE947494207FE67B76460EBeaA23f,\n            name: unicode\"짬뽕\",\n            description: unicode\"얼큰하고 시원한 짬뽕\",\n            price: 9000,\n            image_url: \"https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyNDEyMTZfMTcx%2FMDAxNzM0MzA2NjYwODYw.hQ2hOniGyiUfXq_JyZTkU6kuqC0qp0SBafvJtWd1sK0g.Nv3QClhLyI0xeh-iw4gGKrj6-M0tu64E5hxDquUCyPIg.JPEG%2FIMG_5899.jpg&type=sc960_832\"\n        }));\n        storeMenuMap[0x9206a132Ae7Ffa929f50EF8551c21B387f5234C7].push(Menu({\n            index: 0,\n            store_address: 0x9206a132Ae7Ffa929f50EF8551c21B387f5234C7,\n            name: unicode\"떡볶이\",\n            description: unicode\"매콤달콤한 국민 간식\",\n            price: 5000,\n            image_url: \"https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyNTA1MDFfNDcg%2FMDAxNzQ2MDQ3ODg5ODY1.BbklCP5HUAZwfdoLMC5vncldEe3nXtkMKXy0_UPuIQ4g.6f7xOtSDBBKSf--CMP9LBYVOKD7VD9-TYFbVzJv530og.PNG%2Fcb914beb-a20b-49c6-beee-6bbedea5dde1.png&type=sc960_832\"\n        }));\n        storeMenuMap[0x9206a132Ae7Ffa929f50EF8551c21B387f5234C7].push(Menu({\n            index: 1,\n            store_address: 0x9206a132Ae7Ffa929f50EF8551c21B387f5234C7,\n            name: unicode\"김밥\",\n            description: unicode\"속이 꽉 찬 맛있는 김밥\",\n            price: 3000,\n            image_url: \"https://search.pstatic.net/common/?src=http%3A%2F%2Fblogfiles.naver.net%2FMjAyNDEyMjFfMjE1%2FMDAxNzM0NzgwNzE1OTM4.usw9AVVnHxzFSVsRIf8cunnnrcrPlp4h7Kb_2Q2yKdsg.5ug6RW5y_p5xdHKahorGms0OTAceY0Kghoob9qszjNMg.JPEG%2F%25B1%25E8%25B9%25E4_024.jpg&type=sc960_832\"\n        }));\n        storeMenuMap[0x9206a132Ae7Ffa929f50EF8551c21B387f5234C7].push(Menu({\n            index: 2,\n            store_address: 0x9206a132Ae7Ffa929f50EF8551c21B387f5234C7,\n            name: unicode\"순대\",\n            description: unicode\"쫄깃하고 고소한 순대\",\n            price: 4000,\n            image_url: \"https://search.pstatic.net/common/?src=http%3A%2F%2Fshopping.phinf.naver.net%2Fmain_5330441%2F53304411993.3.20250306104652.jpg&type=sc960_832\"\n        }));\n    }\n\n    function registerUser(string calldata name, string calldata location, int256 pos) external override {\n        require(bytes(userMap[msg.sender].name).length == 0, \"User already registered\");\n        \n        userMap[msg.sender] = User({\n            name: name,\n            addr: msg.sender,\n            location: location,\n            pos: pos\n        });\n    }\n\n    function getStores() public view returns(Store[] memory) {\n        return stores;\n    }\n\n    function registerStore(string calldata name, string calldata description, string calldata location, int256 pos) external override {\n        require(bytes(storeMap[msg.sender].name).length == 0, \"Store already registered\");\n\n        storeMap[msg.sender] = Store({\n            name: name,\n            description: description,\n            addr: msg.sender,\n            location: location,\n            pos: pos\n        });\n\n        stores.push(storeMap[msg.sender]);\n    }\n    function registerDeliver(string calldata name) external override {\n        require(bytes(deliverMap[msg.sender].name).length == 0, \"Deliver already registered\");\n\n        deliverMap[msg.sender] = Deliver({\n            addr: msg.sender,\n            name: name\n        });\n    }\n\n    function addMenu(string calldata name, string calldata description, int256 price, string calldata image_url) external override {\n        require(bytes(storeMap[msg.sender].name).length != 0, \"Not found stores\");\n\n        storeMenuMap[msg.sender].push(Menu({\n            index: storeMenuMap[msg.sender].length+1,\n            name: name,\n            store_address: msg.sender,\n            description: description,\n            price: price,\n            image_url: image_url\n        }));\n    }\n\n    function getStoreMenu(address store_address) public view returns(Menu[] memory) {\n        return storeMenuMap[store_address];\n    }\n\n    function removeMenu(int256 menu_index) external override {\n        revert(\"Unimplemented\");\n    }\n    function removeUser(address user_addr) external override {\n        revert(\"Unimplemented\");\n    }\n    function removeStore(address user_addr) external override {\n        revert(\"Unimplemented\");\n    }\n    function removeDelivery(address user_addr) external override {\n        revert(\"Unimplemented\");\n    }\n    function order(int256[] calldata menu_index) external payable override {\n        revert(\"Unimplemented\");\n    }\n    function approveDelivery(int256 delivery_request_index) external override {\n        revert(\"Unimplemented\");\n    }\n    function confirmOrder(int256 order_index) external override {\n        revert(\"Unimplemented\");\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}